import{b as e,s as t,l as i,n as a}from"./index-WhCY3KaB.js";const n=new class{constructor(){this.cache=new Map,this.cacheTimeout=3e5}async getAllEventi(n={},o={}){try{e.setLoading(!0,"Caricamento eventi clinici...");const{paziente_search:i="",paziente_id:a="",tipo_evento:r="",data_da:s="",data_a:c="",reparto:l="",stato:d="",page:g=0,limit:h=10,sortColumn:v="data_evento",sortDirection:p="desc"}={...n,...o};let f=t.from("eventi_clinici").select("\n          *,\n          pazienti!inner(\n            id,\n            nome,\n            cognome,\n            reparto_appartenenza,\n            codice_rad,\n            data_dimissione\n          )\n        ",{count:"exact"});if(a&&(f=f.eq("paziente_id",a)),r&&(f=f.eq("tipo_evento",r)),s&&(f=f.gte("data_evento",s)),c&&(f=f.lte("data_evento",c)),l&&(f=f.eq("pazienti.reparto_appartenenza",l)),"attivo"===d?f=f.is("pazienti.data_dimissione",null):"dimesso"===d&&(f=f.not("pazienti.data_dimissione","is",null)),!a&&i&&""!==i.trim()){const e=`%${i.trim()}%`,a=await t.from("pazienti").select("id").or(`nome.ilike.${e},cognome.ilike.${e},codice_rad.ilike.${e}`),n=a.data?.map(e=>e.id)||[];if(!(n.length>0))return{eventi:[],totalCount:0,currentPage:g,totalPages:0,hasNextPage:!1,hasPrevPage:!1};f=f.in("paziente_id",n)}const _=g*h,m=_+h-1;v&&""!==String(v).trim()&&(f=f.order(v,{ascending:"asc"===p})),f=f.range(_,m);const{data:u,error:z,count:w}=await f;if(z)throw z;return{eventi:u||[],totalCount:w||0,currentPage:g,totalPages:Math.ceil((w||0)/h),hasNextPage:(g+1)*h<(w||0),hasPrevPage:g>0}}catch(r){throw i.error("Errore nel caricamento eventi clinici:",r),a.error(`Errore nel caricamento: ${r.message}`),r}finally{e.setLoading(!1)}}async getEventiByPaziente(e,n={}){try{const i=`eventi_paziente_${e}_${JSON.stringify(n)}`,a=this.cache.get(i);if(a&&Date.now()-a.timestamp<this.cacheTimeout)return a.data;const{tipo_evento:o="",data_da:r="",data_a:s="",sortColumn:c="data_evento",sortDirection:l="desc"}=n;let d=t.from("eventi_clinici").select("*").eq("paziente_id",e);o&&(d=d.eq("tipo_evento",o)),r&&(d=d.gte("data_evento",r)),s&&(d=d.lte("data_evento",s)),c&&""!==String(c).trim()&&(d=d.order(c,{ascending:"asc"===l}));const{data:g,error:h}=await d;if(h)throw h;return this.cache.set(i,{data:g||[],timestamp:Date.now()}),g||[]}catch(o){throw i.error("Errore nel caricamento eventi paziente:",o),a.error(`Errore nel caricamento eventi: ${o.message}`),o}}async createEvento(n){try{e.setLoading(!0,"Creazione evento clinico..."),this.validateEventoData(n);const{data:i,error:o}=await t.from("eventi_clinici").insert([n]).select().single();if(o)throw o;return"infezione"===n.tipo_evento&&await this._updatePazienteInfezioneStatus(n.paziente_id),this.invalidateCache(),a.success("Evento clinico creato con successo!"),i}catch(o){throw i.error("Errore nella creazione evento:",o),a.error(`Errore nella creazione: ${o.message}`),o}finally{e.setLoading(!1)}}async updateEvento(n,o){try{e.setLoading(!0,"Aggiornamento evento clinico...");const{data:i,error:r}=await t.from("eventi_clinici").select("*").eq("id",n).single();if(r)throw r;if(!i)throw new Error("Evento non trovato");const s={...i,...o};this.validateEventoData(s);const{data:c,error:l}=await t.from("eventi_clinici").update(o).eq("id",n).select().single();if(l)throw l;const d=c.paziente_id;return"infezione"!==i.tipo_evento&&"infezione"!==c.tipo_evento||await this._updatePazienteInfezioneStatus(d),this.invalidateCache(),a.success("Evento clinico aggiornato con successo!"),c}catch(r){throw i.error("Errore nell'aggiornamento evento:",r),a.error(`Errore nell'aggiornamento: ${r.message}`),r}finally{e.setLoading(!1)}}async deleteEvento(n){try{e.setLoading(!0,"Eliminazione evento clinico...");const{data:o,error:r}=await t.from("eventi_clinici").select("paziente_id, tipo_evento").eq("id",n).single();if(r){if("PGRST116"===r.code)return i.log(`Evento con id ${n} già eliminato.`),void 0;throw r}const{error:s}=await t.from("eventi_clinici").delete().eq("id",n);if(s)throw s;o&&"infezione"===o.tipo_evento&&await this._updatePazienteInfezioneStatus(o.paziente_id),this.invalidateCache(),a.success("Evento clinico eliminato con successo!")}catch(o){throw i.error("Errore nell'eliminazione evento:",o),a.error(`Errore nell'eliminazione: ${o.message}`),o}finally{e.setLoading(!1)}}async resolveInfezione(n,o){try{if(e.setLoading(!0,"Risoluzione infezione..."),!n||!o)throw new Error("ID evento e data di fine sono obbligatori.");const{data:i,error:r}=await t.from("eventi_clinici").update({data_fine_evento:o}).eq("id",n).select("paziente_id").single();if(r)throw r;i&&i.paziente_id&&await this._updatePazienteInfezioneStatus(i.paziente_id),this.invalidateCache(),a.success("Infezione risolta con successo!")}catch(r){throw i.error("Errore nella risoluzione dell'infezione:",r),a.error(`Errore nella risoluzione: ${r.message}`),r}finally{e.setLoading(!1)}}async getGiorniPostOperatori(e,a=null){try{const i=a||(new Date).toISOString().split("T")[0],{data:n,error:o}=await t.from("eventi_clinici").select("data_evento").eq("paziente_id",e).eq("tipo_evento","intervento").lte("data_evento",i).order("data_evento",{ascending:!1});if(o)throw o;if(!n||0===n.length)return null;const r=n[0],s=new Date(r.data_evento),c=new Date(i).getTime()-s.getTime(),l=Math.ceil(c/864e5);return{giorni:l,dataUltimoIntervento:r.data_evento,descrizione:`Giorno post-operatorio ${l}`}}catch(n){throw i.error("Errore nel calcolo giorni post-operatori:",n),n}}async searchPazienti(e,n=!0){try{let i=t.from("pazienti").select("id, nome, cognome, data_ricovero, diagnosi, reparto_appartenenza, codice_rad").not("user_id","is",null);const a=`%${e.trim()}%`;i=i.or(`cognome.ilike.${a},nome.ilike.${a},codice_rad.ilike.${a}`),i=i.order("cognome"),n&&(i=i.is("data_dimissione",null));const{data:o,error:r}=await i;if(r)throw r;return o||[]}catch(o){throw i.error("Errore nella ricerca pazienti:",o),a.error(`Errore nella ricerca: ${o.message}`),o}}async searchPazientiWithEvents(e,n=!0){try{const i=`%${e.trim()}%`;let a=t.from("eventi_clinici").select("pazienti: paziente_id (id, nome, cognome, data_ricovero, diagnosi, reparto_appartenenza, codice_rad, user_id, data_dimissione)");n&&(a=a.is("pazienti.data_dimissione",null)),a=a.not("pazienti.user_id","is",null),a=a.or(`pazienti.cognome.ilike.${i},pazienti.nome.ilike.${i},pazienti.codice_rad.ilike.${i}`),a=a.order("pazienti.cognome",{ascending:!0});const{data:o,error:r}=await a;if(r)throw r;const s=new Map;return(o||[]).forEach(e=>{const t=e?.pazienti;t&&!s.has(t.id)&&s.set(t.id,{id:t.id,nome:t.nome,cognome:t.cognome,data_ricovero:t.data_ricovero,diagnosi:t.diagnosi,reparto_appartenenza:t.reparto_appartenenza,codice_rad:t.codice_rad})}),Array.from(s.values())}catch(o){throw i.error("Errore nella ricerca pazienti con eventi:",o),a.error(`Errore nella ricerca: ${o.message}`),o}}validateEventoData(e){const t=["paziente_id","tipo_evento","data_evento"];for(const i of t)if(!e[i]||""===e[i].toString().trim())throw new Error(`Il campo ${i} è obbligatorio`);const a=["intervento","infezione"];if(!a.includes(e.tipo_evento))throw new Error(`Tipo evento non valido. Valori ammessi: ${a.join(", ")}`);if(e.data_evento){if(!/^\d{4}-\d{2}-\d{2}$/.test(e.data_evento))throw new Error("Formato data non valido. La data deve essere nel formato YYYY-MM-DD, ricevuto: "+e.data_evento);const t=new Date(e.data_evento+"T00:00:00"),i=new Date;if(isNaN(t.getTime()))throw new Error("Data non valida: "+e.data_evento);const a=new Date(i.getFullYear(),i.getMonth(),i.getDate());if(new Date(t.getFullYear(),t.getMonth(),t.getDate())>a)throw new Error("La data dell'evento non può essere nel futuro")}if("intervento"===e.tipo_evento&&!e.tipo_intervento)throw new Error("Il tipo di intervento è obbligatorio per gli interventi chirurgici");"infezione"!==e.tipo_evento||e.agente_patogeno||i.log("Attenzione: agente patogeno non specificato per l'infezione")}invalidateCache(){this.cache.clear()}async getEventiStats(){try{const{data:e,error:i}=await t.from("eventi_clinici").select("tipo_evento, data_evento");if(i)throw i;const a={total:Array.isArray(e)?e.length:0,interventi:Array.isArray(e)?e.filter(e=>"intervento"===e.tipo_evento).length:0,infezioni:Array.isArray(e)?e.filter(e=>"infezione"===e.tipo_evento).length:0,ultimoMese:0};if(Array.isArray(e)){const t=new Date;t.setMonth(t.getMonth()-1),a.ultimoMese=e.filter(e=>new Date(e.data_evento)>=t).length}return a}catch(e){throw i.error("Errore nel caricamento statistiche eventi:",e),e}}async _updatePazienteInfezioneStatus(e){if(e)try{const{data:a,error:n}=await t.from("eventi_clinici").select("data_evento, data_fine_evento").eq("paziente_id",e).eq("tipo_evento","infezione").is("data_fine_evento",null).order("data_evento",{ascending:!1}).limit(1);if(n)throw new Error(`Errore nel recupero delle infezioni per il paziente ${e}: ${n.message}`);const o=a&&a.length>0?a[0]:null,r={infetto:!!o,data_infezione:o?o.data_evento:null},{error:s}=await t.from("pazienti").update(r).eq("id",e);if(s)throw new Error(`Errore nell'aggiornamento dello stato infezione del paziente ${e}: ${s.message}`);i.log(`Stato infezione per paziente ${e} aggiornato: infetto=${r.infetto}`)}catch(n){i.error(n.message),a.warn(`Non è stato possibile sincronizzare lo stato di infezione del paziente. Dettagli: ${n.message}`)}}};class o{constructor(){this.infectionData=null,this.isValid=!1,this.validationErrors=[]}setInfectionData(e){if(!e)return this.clearInfectionData(),void 0;this.infectionData={data_evento:e.data_evento||"",agente_patogeno:e.agente_patogeno||"",descrizione:e.descrizione||"",timestamp:Date.now()},this.validateInfectionData(this.infectionData)}getInfectionData(){return this.infectionData?{...this.infectionData}:null}clearInfectionData(){this.infectionData=null,this.isValid=!1,this.validationErrors=[]}hasValidInfectionData(){return null!==this.infectionData&&this.isValid}hasInfectionData(){return null!==this.infectionData}validateInfectionData(e){if(this.validationErrors=[],!e)return this.isValid=!1,!1;if(e.data_evento){const t=new Date(e.data_evento),i=new Date;i.setHours(23,59,59,999),isNaN(t.getTime())?this.validationErrors.push({field:"data_evento",message:"Formato data non valido"}):t>i&&this.validationErrors.push({field:"data_evento",message:"La data dell'infezione non può essere futura"})}else this.validationErrors.push({field:"data_evento",message:"La data dell'infezione è obbligatoria"});return e.agente_patogeno&&""!==e.agente_patogeno.trim()?e.agente_patogeno.trim().length<2?this.validationErrors.push({field:"agente_patogeno",message:"L'agente patogeno deve contenere almeno 2 caratteri"}):e.agente_patogeno.length>100&&this.validationErrors.push({field:"agente_patogeno",message:"L'agente patogeno non può superare i 100 caratteri"}):this.validationErrors.push({field:"agente_patogeno",message:"L'agente patogeno è obbligatorio"}),e.descrizione&&e.descrizione.length>500&&this.validationErrors.push({field:"descrizione",message:"La descrizione non può superare i 500 caratteri"}),this.isValid=0===this.validationErrors.length,this.isValid}getValidationErrors(){return[...this.validationErrors]}getFieldErrors(e){return this.validationErrors.filter(t=>t.field===e)}hasFieldError(e){return this.validationErrors.some(t=>t.field===e)}getStatus(){return{hasData:this.hasInfectionData(),isValid:this.isValid,errorCount:this.validationErrors.length,timestamp:this.infectionData?.timestamp||null}}cleanupExpiredData(){if(this.infectionData&&this.infectionData.timestamp){const e=Date.now()-36e5;if(this.infectionData.timestamp<e)return this.clearInfectionData(),!0}return!1}}const r=new o,s=Object.freeze(Object.defineProperty({__proto__:null,InfectionDataManager:o,default:r},Symbol.toStringTag,{value:"Module"}));export{s as a,n as e,r as i};

const t=new class{constructor(){this.interventionTypes=["Chirurgia Ortopedica","Chirurgia Plastica","Chirurgia Vascolare","Chirurgia Generale","Altro"]}calculatePostOperativeDays(t,e=new Date){try{if(!Array.isArray(t))throw new Error("eventiClinici must be an array");const n=this.parseDate(e);if(!n)throw new Error("Invalid reference date");const a=this.filterInterventions(t);if(0===a.length)return{hasInterventions:!1,postOperativeDays:null,lastIntervention:null,displayText:null,allInterventions:[]};const r=this.sortInterventionsByDate(a),i=r[0],s=this.parseDate(i.data_evento);if(!s)throw new Error("Invalid intervention date");const o=this.calculateDaysDifference(s,n);return{hasInterventions:!0,postOperativeDays:o,lastIntervention:i,displayText:this.formatDisplayText(o),allInterventions:r}}catch(n){return window.appLogger?.error("Error calculating post-operative days:",n),{hasInterventions:!1,postOperativeDays:null,lastIntervention:null,displayText:null,allInterventions:[],error:n.message}}}calculateForMultiplePatients(t,e=new Date){const n=new Map;return Array.isArray(t)?(t.forEach(t=>{if(t.id&&t.eventi_clinici){const a=this.calculatePostOperativeDays(t.eventi_clinici,e);n.set(t.id,a)}}),n):n}getPostOperativeStatus(t,e=new Date){const n=this.calculatePostOperativeDays(t,e);if(!n.hasInterventions)return{hasStatus:!1,statusText:"",statusClass:"",badgeText:""};const a=n.postOperativeDays,r=this.hasActiveInfection(t);let i="success",s=`PO ${a}`;return r?(i="danger",s=`PO ${a} ðŸ¦ `):a<=7?i="danger":a<=30?i="warning":a<=90&&(i="info"),{hasStatus:!0,statusText:n.displayText,statusClass:i,badgeText:s,days:a,lastIntervention:n.lastIntervention,hasActiveInfection:r}}hasActiveInfection(t){return!!Array.isArray(t)&&t.some(t=>"infezione"===t.tipo_evento&&t.data_evento&&!t.data_fine_evento)}filterInterventions(t){return t.filter(t=>"intervento"===t.tipo_evento&&t.data_evento&&t.tipo_intervento)}sortInterventionsByDate(t){return t.sort((t,e)=>{const n=this.parseDate(t.data_evento),a=this.parseDate(e.data_evento);return n&&a?a.getTime()-n.getTime():0})}calculateDaysDifference(t,e){const n=e.getTime()-t.getTime(),a=Math.floor(n/864e5);return Math.max(0,a)}formatDisplayText(t){return 0===t?"Giorno dell'intervento":1===t?"Giorno post-operatorio 1":`Giorno post-operatorio ${t}`}getDetailedPostOperativeInfo(t,e=new Date){const n=this.calculatePostOperativeDays(t,e);if(!n.hasInterventions)return{hasInterventions:!1,summary:"Nessun intervento chirurgico registrato",details:[]};const a=n.allInterventions.map((t,n)=>{const a=this.parseDate(t.data_evento),r=this.calculateDaysDifference(a,this.parseDate(e));return{date:t.data_evento,type:t.tipo_intervento,description:t.descrizione||"",daysSince:r,displayText:this.formatDisplayText(r),isLatest:0===n}});return{hasInterventions:!0,currentPostOpDay:n.postOperativeDays,currentDisplayText:n.displayText,lastInterventionDate:n.lastIntervention.data_evento,lastInterventionType:n.lastIntervention.tipo_intervento,totalInterventions:n.allInterventions.length,summary:`${n.displayText} (${n.allInterventions.length} interventi totali)`,details:a}}isInCriticalPostOpPeriod(t,e=7,n=new Date){const a=this.calculatePostOperativeDays(t,n);if(!a.hasInterventions)return{isCritical:!1,reason:"No interventions recorded"};const r=a.postOperativeDays<=e;return{isCritical:r,postOpDays:a.postOperativeDays,criticalThreshold:e,reason:r?`Patient is ${a.postOperativeDays} days post-operative (â‰¤${e} days)`:`Patient is ${a.postOperativeDays} days post-operative (>${e} days)`}}parseDate(t){if(!t)return null;if(t instanceof Date)return isNaN(t.getTime())?null:t;if("string"==typeof t){if(/^\d{4}-\d{2}-\d{2}$/.test(t)){const e=new Date(t+"T00:00:00.000Z");return isNaN(e.getTime())?null:e}if(/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(t)){const e=t.split("/"),n=parseInt(e[0],10),a=parseInt(e[1],10)-1,r=parseInt(e[2],10),i=new Date(r,a,n);return isNaN(i.getTime())?null:i}const e=new Date(t);return isNaN(e.getTime())?null:e}return null}validateInterventionEvent(t){const e=[];if(!t)return e.push("Event object is required"),{isValid:!1,errors:e};if("intervento"!==t.tipo_evento&&e.push('Event type must be "intervento"'),t.data_evento){const n=this.parseDate(t.data_evento);n?n>new Date&&e.push("Event date cannot be in the future"):e.push("Invalid event date format")}else e.push("Event date is required");return t.tipo_intervento||e.push("Intervention type is required"),{isValid:0===e.length,errors:e}}getPostOperativeStatistics(t,e=new Date){if(!Array.isArray(t))return{totalPatients:0,patientsWithInterventions:0,criticalPeriod:0,earlyRecovery:0,lateRecovery:0,averagePostOpDays:0};let n=0,a=0,r=0,i=0,s=0;return t.forEach(t=>{if(t.eventi_clinici){const o=this.calculatePostOperativeDays(t.eventi_clinici,e);o.hasInterventions&&(n++,s+=o.postOperativeDays,o.postOperativeDays<=7?a++:o.postOperativeDays<=30?r++:i++)}}),{totalPatients:t.length,patientsWithInterventions:n,criticalPeriod:a,earlyRecovery:r,lateRecovery:i,averagePostOpDays:n>0?Math.round(s/n):0}}};function e(e,n){return t.getPostOperativeStatus(e,n)}export{e as g,t as p};

import{a as e,c as r,l as t,r as i}from"./lookupService-COkLmSMC.js";import{s as o,l as a}from"./index-BHDscdmm.js";import{i as n}from"./index-BHDscdmm.js";import"./vendor-CQCqr9ER.js";import"./supabase-B8WzuNbi.js";const s=new class{constructor(){this.currentUserRole=null,this.roleCache=new Map,this.cacheTimeout=12e4}async getCurrentUserRole(){try{const{data:{user:e},error:r}=await o.auth.getUser();if(r||!e)throw new Error("Utente non autenticato");const t=`role_${e.id}`,i=this.roleCache.get(t);if(i&&Date.now()-i.timestamp<this.cacheTimeout)return this.currentUserRole=i.role,i.role;const{data:n,error:s}=await o.from("profiles").select("role").eq("user_id",e.id).single();if(s)return a.warn("Errore nel caricamento ruolo utente:",s),this.currentUserRole="viewer","viewer";const l=n?.role||"viewer";return this.roleCache.set(t,{role:l,timestamp:Date.now()}),this.currentUserRole=l,l}catch(e){return a.error("Errore nel caricamento ruolo:",e),this.currentUserRole="viewer","viewer"}}async hasRoleOrHigher(e){const r=await this.getCurrentUserRole();return this.compareRoles(r,e)}compareRoles(e,r){const t={viewer:1,editor:2,admin:3};return(t[e]||1)>=(t[r]||1)}async canRead(){return await this.hasRoleOrHigher("viewer")}async canWrite(){return await this.hasRoleOrHigher("editor")}async canDelete(){return await this.hasRoleOrHigher("admin")}async isAdmin(){return"admin"===await this.getCurrentUserRole()}async isEditorOrAdmin(){return await this.hasRoleOrHigher("editor")}async getAllUsersWithRoles(){if(!(await this.isAdmin()))throw new Error("Solo gli admin possono visualizzare tutti gli utenti");try{const{data:e,error:r}=await o.from("profiles").select("\n          user_id,\n          role,\n          created_at,\n          updated_at\n        ").order("created_at",{ascending:!1});if(r)throw r;return e||[]}catch(e){throw a.error("Errore nel caricamento utenti:",e),e}}async updateUserRole(e,r){if(!(await this.isAdmin()))throw new Error("Solo gli admin possono modificare i ruoli");const t=["viewer","editor","admin"];if(!t.includes(r))throw new Error(`Ruolo non valido. Ruoli validi: ${t.join(", ")}`);try{const{data:t,error:i}=await o.from("profiles").update({role:r}).eq("user_id",e).select();if(i)throw i;return this.roleCache.delete(`role_${e}`),0,a.log(`Ruolo aggiornato per utente ${e?.substring(0,8)}...: ${r}`),t}catch(i){throw a.error("Errore nell'aggiornamento ruolo:",i),i}}async ensureUserProfile(e,r="viewer"){try{const{data:t,error:i}=await o.from("profiles").upsert({user_id:e,role:r},{onConflict:"user_id"}).select();if(i)throw i;return this.roleCache.delete(`role_${e}`),t}catch(t){throw a.error("Errore nella creazione profilo:",t),t}}async getRoleStats(){if(!(await this.isAdmin()))throw new Error("Solo gli admin possono visualizzare le statistiche");try{const{data:e,error:r}=await o.from("profiles").select("role");if(r)throw r;const t={total:e.length,viewer:0,editor:0,admin:0,undefined:0};return e.forEach(e=>{const r=e.role||"undefined";t[r]=(t[r]||0)+1}),t}catch(e){throw a.error("Errore nel caricamento statistiche ruoli:",e),e}}invalidateCache(){this.roleCache.clear(),this.currentUserRole=null}getCachedRole(){return this.currentUserRole}async checkPermission(e,r=null){const t=await this.getCurrentUserRole();return({read_patients:["viewer","editor","admin"],read_events:["viewer","editor","admin"],read_profiles:["admin"],create_patients:["editor","admin"],update_patients:["editor","admin"],create_events:["editor","admin"],update_events:["editor","admin"],delete_patients:["admin"],delete_events:["admin"],manage_roles:["admin"],view_all_users:["admin"]}[e]||[]).includes(t)}requirePermission(e){return async(r,t,i)=>{try{if(!(await this.checkPermission(e)))throw new Error(`Permesso negato per l'azione: ${e}`);i()}catch(o){throw o}}}};"undefined"!=typeof window&&(window.roleService=s);export{e as clinicheService,r as codiciDimissioneService,n as initBackToMenuButtons,a as logger,t as lookupService,i as repartiService,s as roleService};

import{b as e,s as i,l as t,n as o}from"./index-DO9lBiyv.js";function n(e){if(!e)return"-";let i=e;if("string"==typeof i){const e=i.trim();if(0===e.length)return"-";let t=e.match(/^(\d{1,2})[/-](\d{1,2})[/-](\d{4})$/);if(t){const[,e,o,n]=t,a=String(e).padStart(2,"0");i=`${n}-${String(o).padStart(2,"0")}-${a}`}else if(t=e.match(/^(\d{4})[/-](\d{1,2})[/-](\d{1,2})(?:[ T](\d{2}:\d{2}:\d{2}))?$/),t){const[,e,o,n,a]=t,r=String(n).padStart(2,"0");i=`${e}-${String(o).padStart(2,"0")}-${r}${a?"T"+a:""}`}else i=e.includes(" ")&&!e.includes("T")?e.replace(" ","T"):e}const t=i instanceof Date?i:new Date(i);return Number.isNaN(t.getTime())?"-":t.toLocaleDateString("it-IT")}function a(e){const i={nome:"Nome",cognome:"Cognome",data_nascita:"Data Nascita",data_ricovero:"Data Ricovero",diagnosi:"Diagnosi",reparto_appartenenza:"Reparto Appartenenza",reparto_provenienza:"Reparto Provenienza"},t=["nome","cognome","data_nascita","data_ricovero","diagnosi","reparto_appartenenza","reparto_provenienza"];for(const o of t)if(!e[o]||""===e[o].toString().trim()){throw new Error(`Il campo "${i[o]||o}" è obbligatorio.`)}if(e.data_nascita){if(new Date(e.data_nascita)>new Date)throw new Error("La data di nascita non può essere nel futuro")}if(e.data_ricovero){if(new Date(e.data_ricovero)>new Date)throw new Error("La data di ricovero non può essere nel futuro")}if(e.data_dimissione){if(new Date(e.data_dimissione)<new Date(e.data_ricovero))throw new Error("La data di dimissione non può essere precedente alla data di ricovero")}if(e.data_infezione){const i=new Date(e.data_infezione),t=new Date(e.data_ricovero),o=new Date;if(i<t)throw new Error("La data di infezione non può essere precedente alla data di ricovero");if(i>o)throw new Error("La data di infezione non può essere nel futuro");if(e.data_dimissione){if(i>new Date(e.data_dimissione))throw new Error("La data di infezione non può essere successiva alla data di dimissione")}}if(e.codice_rad&&""!==e.codice_rad.trim()&&e.codice_rad.length>11)throw new Error("Il codice RAD non può superare i 11 caratteri");if(e.tipo_dimissione){const i=["dimissione","trasferimento_interno","trasferimento_esterno","decesso"];if(!i.includes(e.tipo_dimissione))throw new Error(`Tipo dimissione non valido. Valori ammessi: ${i.join(", ")}`);if("trasferimento_interno"===e.tipo_dimissione&&(!e.reparto_destinazione||""===e.reparto_destinazione.trim()))throw new Error("Il reparto di destinazione è obbligatorio per i trasferimenti interni");if("trasferimento_esterno"===e.tipo_dimissione){if(!e.clinica_destinazione||""===e.clinica_destinazione.trim())throw new Error("La clinica di destinazione è obbligatoria per i trasferimenti esterni");if(!e.codice_clinica)throw new Error("Il codice clinica è obbligatorio per i trasferimenti esterni");const i=["56","60"];if(!i.includes(e.codice_clinica))throw new Error(`Codice clinica non valido. Valori ammessi: ${i.join(", ")}`)}const t=["0","3","6"];if(["dimissione","trasferimento_esterno"].includes(e.tipo_dimissione)){if(!e.codice_dimissione)throw new Error("Il codice dimissione è obbligatorio per il tipo selezionato");if(!t.includes(e.codice_dimissione))throw new Error(`Codice dimissione non valido. Valori ammessi: ${t.join(", ")}`);if("dimissione"===e.tipo_dimissione&&!["0","6"].includes(String(e.codice_dimissione)))throw new Error("Per 'dimissione' sono ammessi solo i codici 0 (ordinaria) o 6 (protetta)");if("trasferimento_esterno"===e.tipo_dimissione&&"3"!==String(e.codice_dimissione))throw new Error("Per 'trasferimento_esterno' è ammesso solo il codice 3")}else if(["trasferimento_interno","decesso"].includes(e.tipo_dimissione)&&e.codice_dimissione)throw new Error("Per 'trasferimento_interno' o 'decesso' il codice dimissione non deve essere valorizzato")}}function r(e){const i=["data_dimissione","tipo_dimissione"];for(const n of i)if(!e[n]||""===e[n].toString().trim())throw new Error(`Il campo ${n} è obbligatorio`);const t=["dimissione","trasferimento_interno","trasferimento_esterno","decesso"];if(!t.includes(e.tipo_dimissione))throw new Error(`Tipo dimissione non valido. Valori ammessi: ${t.join(", ")}`);if(e.data_dimissione){if(new Date(e.data_dimissione)>new Date)throw new Error("La data di dimissione non può essere nel futuro")}if("trasferimento_interno"===e.tipo_dimissione&&(!e.reparto_destinazione||""===e.reparto_destinazione.trim()))throw new Error("Il reparto di destinazione è obbligatorio per i trasferimenti interni");if("trasferimento_esterno"===e.tipo_dimissione){if(!e.clinica_destinazione||""===e.clinica_destinazione.trim())throw new Error("La clinica di destinazione è obbligatoria per i trasferimenti esterni");if(!e.codice_clinica)throw new Error("Il codice clinica è obbligatorio per i trasferimenti esterni");const i=["56","60"];if(!i.includes(e.codice_clinica))throw new Error(`Codice clinica non valido. Valori ammessi: ${i.join(", ")}`)}const o=["0","3","6"];if(["dimissione","trasferimento_esterno"].includes(e.tipo_dimissione)){if(!e.codice_dimissione)throw new Error("Il codice dimissione è obbligatorio");if(!o.includes(e.codice_dimissione))throw new Error(`Codice dimissione non valido. Valori ammessi: ${o.join(", ")}`);if("dimissione"===e.tipo_dimissione&&!["0","6"].includes(String(e.codice_dimissione)))throw new Error("Per 'dimissione' sono ammessi solo i codici 0 (ordinaria) o 6 (protetta)");if("trasferimento_esterno"===e.tipo_dimissione&&"3"!==String(e.codice_dimissione))throw new Error("Per 'trasferimento_esterno' è ammesso solo il codice 3")}else if(["trasferimento_interno","decesso"].includes(e.tipo_dimissione)&&e.codice_dimissione)throw new Error("Per 'trasferimento_interno' o 'decesso' il codice dimissione non deve essere valorizzato")}function s(e,i={}){const t="string"==typeof e?e:e?.message||"",o="object"==typeof e&&e&&"details"in e?e.details:"",n="object"==typeof e&&e&&"code"in e?e.code:void 0,{entity:a="record",operation:r}=i,s={nome:"Nome",cognome:"Cognome",codice_rad:"Codice RAD",data_ricovero:"Data Ricovero",reparto_appartenenza:"Reparto Appartenenza",reparto_provenienza:"Reparto Provenienza",diagnosi:"Diagnosi",user_id:"Utente"},c=()=>{const e=[/column\s+'([^']+)'/i,/"([^"]+)"\s+column/i,/Key\s*\(([^)]+)\)/i,/column\s+"([^"]+)"/i];for(const i of e){const e=i.exec(t)||(o?i.exec(o):null);if(e&&e[1])return e[1]}};if("23502"===n||/violates not-null constraint/i.test(t)||/null value in column/i.test(t)){const e=c();if("user_id"===e)return"Utente non autenticato. Effettua nuovamente l'accesso e riprova.";if(!e)return"Compila tutti i campi obbligatori.";const i=s[e]||function(e){return e?e.split("_").filter(Boolean).map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(" "):""}(e);return`Il campo "${d=i,d?d.charAt(0).toUpperCase()+d.slice(1):d}" è obbligatorio.`}var d;if("23505"===n||/duplicate key value violates unique constraint/i.test(t))return/codice_rad/i.test(t)?`Esiste già un ${a} con lo stesso Codice RAD.`:"Alcuni valori devono essere unici: verifica i dati inseriti.";if("23503"===n||/violates foreign key constraint/i.test(t)){const e=c();return`Valore non valido per ${e&&s[e]?s[e]:"alcuni campi"}. Seleziona un'opzione corretta e riprova.`}if("23514"===n||/violates check constraint/i.test(t))return"Alcuni dati non rispettano i vincoli richiesti. Verifica i campi e riprova.";if("PGRST301"===n||/JWT|auth|unauth/i.test(t))return"Sessione scaduta o non valida. Effettua l'accesso e riprova.";return`Si è verificato un errore durante il ${r||"salvataggio"} del ${a}. Verifica i campi e riprova.`}const c=new class{constructor(){this.cache=new Map,this.cacheTimeout=3e5}async getAllEventi(n={},a={}){try{e.setLoading(!0,"Caricamento eventi clinici...");const{paziente_search:t="",paziente_id:o="",tipo_evento:r="",data_da:s="",data_a:c="",reparto:d="",stato:l="",page:p=0,limit:m=10,sortColumn:f="data_evento",sortDirection:_="desc"}={...n,...a},g=!!a.countOnly;let v=i.from("eventi_clinici").select("\n          *,\n          pazienti!inner(\n            id,\n            nome,\n            cognome,\n            reparto_appartenenza,\n            codice_rad,\n            data_dimissione\n          )\n        ",{count:"exact",head:g});if(o&&(v=v.eq("paziente_id",o)),r&&(v=v.eq("tipo_evento",r)),s&&(v=v.gte("data_evento",s)),c&&(v=v.lte("data_evento",c)),d&&(v=v.eq("pazienti.reparto_appartenenza",d)),"attivo"===l?v=v.is("pazienti.data_dimissione",null):"dimesso"===l&&(v=v.not("pazienti.data_dimissione","is",null)),!o&&t&&""!==t.trim()){const e=`%${t.trim()}%`,o=await i.from("pazienti").select("id").or(`nome.ilike.${e},cognome.ilike.${e},codice_rad.ilike.${e}`),n=o.data?.map(e=>e.id)||[];if(!(n.length>0))return{eventi:[],totalCount:0,currentPage:p,totalPages:0,hasNextPage:!1,hasPrevPage:!1};v=v.in("paziente_id",n)}const u=p*m,h=u+m-1;f&&""!==String(f).trim()&&(v=v.order(f,{ascending:"asc"===_})),g||(v=v.range(u,h));const{data:w,error:z,count:E}=await v;if(z)throw z;return{eventi:g?[]:w||[],totalCount:E||0,currentPage:p,totalPages:Math.ceil((E||0)/m),hasNextPage:(p+1)*m<(E||0),hasPrevPage:p>0}}catch(r){throw t.error("Errore nel caricamento eventi clinici:",r),o.error(`Errore nel caricamento: ${r.message}`),r}finally{e.setLoading(!1)}}async getEventiByPaziente(e,n={}){try{const t=`eventi_paziente_${e}_${JSON.stringify(n)}`,o=this.cache.get(t);if(o&&Date.now()-o.timestamp<this.cacheTimeout)return o.data;const{tipo_evento:a="",data_da:r="",data_a:s="",sortColumn:c="data_evento",sortDirection:d="desc"}=n;let l=i.from("eventi_clinici").select("*").eq("paziente_id",e);a&&(l=l.eq("tipo_evento",a)),r&&(l=l.gte("data_evento",r)),s&&(l=l.lte("data_evento",s)),c&&""!==String(c).trim()&&(l=l.order(c,{ascending:"asc"===d}));const{data:p,error:m}=await l;if(m)throw m;return this.cache.set(t,{data:p||[],timestamp:Date.now()}),p||[]}catch(a){throw t.error("Errore nel caricamento eventi paziente:",a),o.error(`Errore nel caricamento eventi: ${a.message}`),a}}async createEvento(n){try{e.setLoading(!0,"Creazione evento clinico..."),this.validateEventoData(n);const{data:t,error:a}=await i.from("eventi_clinici").insert([n]).select().single();if(a)throw a;return"infezione"===n.tipo_evento&&await this._updatePazienteInfezioneStatus(n.paziente_id),this.invalidateCache(),o.success("Evento clinico creato con successo!"),t}catch(a){throw t.error("Errore nella creazione evento:",a),o.error(`Errore nella creazione: ${a.message}`),a}finally{e.setLoading(!1)}}async updateEvento(n,a){try{e.setLoading(!0,"Aggiornamento evento clinico...");const{data:t,error:r}=await i.from("eventi_clinici").select("*").eq("id",n).single();if(r)throw r;if(!t)throw new Error("Evento non trovato");const s={...t,...a};this.validateEventoData(s);const{data:c,error:d}=await i.from("eventi_clinici").update(a).eq("id",n).select().single();if(d)throw d;const l=c.paziente_id;return"infezione"!==t.tipo_evento&&"infezione"!==c.tipo_evento||await this._updatePazienteInfezioneStatus(l),this.invalidateCache(),o.success("Evento clinico aggiornato con successo!"),c}catch(r){throw t.error("Errore nell'aggiornamento evento:",r),o.error(`Errore nell'aggiornamento: ${r.message}`),r}finally{e.setLoading(!1)}}async deleteEvento(n){try{e.setLoading(!0,"Eliminazione evento clinico...");const{data:a,error:r}=await i.from("eventi_clinici").select("paziente_id, tipo_evento").eq("id",n).single();if(r){if("PGRST116"===r.code)return t.log(`Evento con id ${n} già eliminato.`),void 0;throw r}const{error:s}=await i.from("eventi_clinici").delete().eq("id",n);if(s)throw s;a&&"infezione"===a.tipo_evento&&await this._updatePazienteInfezioneStatus(a.paziente_id),this.invalidateCache(),o.success("Evento clinico eliminato con successo!")}catch(a){throw t.error("Errore nell'eliminazione evento:",a),o.error(`Errore nell'eliminazione: ${a.message}`),a}finally{e.setLoading(!1)}}async resolveInfezione(n,a){try{if(e.setLoading(!0,"Risoluzione infezione..."),!n||!a)throw new Error("ID evento e data di fine sono obbligatori.");const{data:t,error:r}=await i.from("eventi_clinici").update({data_fine_evento:a}).eq("id",n).select("paziente_id").single();if(r)throw r;t&&t.paziente_id&&await this._updatePazienteInfezioneStatus(t.paziente_id),this.invalidateCache(),o.success("Infezione risolta con successo!")}catch(r){throw t.error("Errore nella risoluzione dell'infezione:",r),o.error(`Errore nella risoluzione: ${r.message}`),r}finally{e.setLoading(!1)}}async getGiorniPostOperatori(e,o=null){try{const t=o||(new Date).toISOString().split("T")[0],{data:n,error:a}=await i.from("eventi_clinici").select("data_evento").eq("paziente_id",e).eq("tipo_evento","intervento").lte("data_evento",t).order("data_evento",{ascending:!1});if(a)throw a;if(!n||0===n.length)return null;const r=n[0],s=new Date(r.data_evento),c=new Date(t).getTime()-s.getTime(),d=Math.ceil(c/864e5);return{giorni:d,dataUltimoIntervento:r.data_evento,descrizione:`Giorno post-operatorio ${d}`}}catch(n){throw t.error("Errore nel calcolo giorni post-operatori:",n),n}}async searchPazienti(e,n=!0){try{let t=i.from("pazienti").select("id, nome, cognome, data_ricovero, diagnosi, reparto_appartenenza, codice_rad").not("user_id","is",null);const o=`%${e.trim()}%`;t=t.or(`cognome.ilike.${o},nome.ilike.${o},codice_rad.ilike.${o}`),t=t.order("cognome"),n&&(t=t.is("data_dimissione",null));const{data:a,error:r}=await t;if(r)throw r;return a||[]}catch(a){throw t.error("Errore nella ricerca pazienti:",a),o.error(`Errore nella ricerca: ${a.message}`),a}}async searchPazientiWithEvents(e,n=!0){try{const t=`%${e.trim()}%`;let o=i.from("eventi_clinici").select("pazienti: paziente_id (id, nome, cognome, data_ricovero, diagnosi, reparto_appartenenza, codice_rad, user_id, data_dimissione)");n&&(o=o.is("pazienti.data_dimissione",null)),o=o.not("pazienti.user_id","is",null),o=o.or(`pazienti.cognome.ilike.${t},pazienti.nome.ilike.${t},pazienti.codice_rad.ilike.${t}`),o=o.order("pazienti.cognome",{ascending:!0});const{data:a,error:r}=await o;if(r)throw r;const s=new Map;return(a||[]).forEach(e=>{const i=e?.pazienti;i&&!s.has(i.id)&&s.set(i.id,{id:i.id,nome:i.nome,cognome:i.cognome,data_ricovero:i.data_ricovero,diagnosi:i.diagnosi,reparto_appartenenza:i.reparto_appartenenza,codice_rad:i.codice_rad})}),Array.from(s.values())}catch(a){throw t.error("Errore nella ricerca pazienti con eventi:",a),o.error(`Errore nella ricerca: ${a.message}`),a}}validateEventoData(e){const i=["paziente_id","tipo_evento","data_evento"];for(const t of i)if(!e[t]||""===e[t].toString().trim())throw new Error(`Il campo ${t} è obbligatorio`);const o=["intervento","infezione"];if(!o.includes(e.tipo_evento))throw new Error(`Tipo evento non valido. Valori ammessi: ${o.join(", ")}`);if(e.data_evento){if(!/^\d{4}-\d{2}-\d{2}$/.test(e.data_evento))throw new Error("Formato data non valido. La data deve essere nel formato YYYY-MM-DD, ricevuto: "+e.data_evento);const i=new Date(e.data_evento+"T00:00:00"),t=new Date;if(isNaN(i.getTime()))throw new Error("Data non valida: "+e.data_evento);const o=new Date(t.getFullYear(),t.getMonth(),t.getDate());if(new Date(i.getFullYear(),i.getMonth(),i.getDate())>o)throw new Error("La data dell'evento non può essere nel futuro")}if("intervento"===e.tipo_evento&&!e.tipo_intervento)throw new Error("Il tipo di intervento è obbligatorio per gli interventi chirurgici");"infezione"!==e.tipo_evento||e.agente_patogeno||t.log("Attenzione: agente patogeno non specificato per l'infezione")}invalidateCache(){this.cache.clear()}async getEventiStats(){try{const{data:e,error:t}=await i.from("eventi_clinici").select("tipo_evento, data_evento");if(t)throw t;const o={total:Array.isArray(e)?e.length:0,interventi:Array.isArray(e)?e.filter(e=>"intervento"===e.tipo_evento).length:0,infezioni:Array.isArray(e)?e.filter(e=>"infezione"===e.tipo_evento).length:0,ultimoMese:0};if(Array.isArray(e)){const i=new Date;i.setMonth(i.getMonth()-1),o.ultimoMese=e.filter(e=>new Date(e.data_evento)>=i).length}return o}catch(e){throw t.error("Errore nel caricamento statistiche eventi:",e),e}}async getSuggestedFilters(){try{const[e,t,o]=await Promise.all([i.from("eventi_clinici").select("tipo_intervento").eq("tipo_evento","intervento").not("tipo_intervento","is",null).order("tipo_intervento"),i.from("eventi_clinici").select("agente_patogeno").eq("tipo_evento","infezione").not("agente_patogeno","is",null).order("agente_patogeno"),i.from("pazienti").select("reparto_appartenenza").not("reparto_appartenenza","is",null).order("reparto_appartenenza")]);return{tipiIntervento:[...new Set(e.data?.map(e=>e.tipo_intervento)||[])],agentiPatogeni:[...new Set(t.data?.map(e=>e.agente_patogeno)||[])],reparti:[...new Set(o.data?.map(e=>e.reparto_appartenenza)||[])]}}catch(e){throw t.error("Errore caricamento filtri suggeriti:",e),e}}async _updatePazienteInfezioneStatus(e){if(e)try{const{data:o,error:n}=await i.from("eventi_clinici").select("data_evento, data_fine_evento").eq("paziente_id",e).eq("tipo_evento","infezione").is("data_fine_evento",null).order("data_evento",{ascending:!1}).limit(1);if(n)throw new Error(`Errore nel recupero delle infezioni per il paziente ${e}: ${n.message}`);const a=o&&o.length>0?o[0]:null,r={infetto:!!a,data_infezione:a?a.data_evento:null},{error:s}=await i.from("pazienti").update(r).eq("id",e);if(s)throw new Error(`Errore nell'aggiornamento dello stato infezione del paziente ${e}: ${s.message}`);t.log(`Stato infezione per paziente ${e} aggiornato: infetto=${r.infetto}`)}catch(n){t.error(n.message),o.warn(`Non è stato possibile sincronizzare lo stato di infezione del paziente. Dettagli: ${n.message}`)}}};class d{constructor(){this.infectionData=null,this.isValid=!1,this.validationErrors=[]}setInfectionData(e){if(!e)return this.clearInfectionData(),void 0;this.infectionData={data_evento:e.data_evento||"",agente_patogeno:e.agente_patogeno||"",descrizione:e.descrizione||"",timestamp:Date.now()},this.validateInfectionData(this.infectionData)}getInfectionData(){return this.infectionData?{...this.infectionData}:null}clearInfectionData(){this.infectionData=null,this.isValid=!1,this.validationErrors=[]}hasValidInfectionData(){return null!==this.infectionData&&this.isValid}hasInfectionData(){return null!==this.infectionData}validateInfectionData(e){if(this.validationErrors=[],!e)return this.isValid=!1,!1;if(e.data_evento){const i=new Date(e.data_evento),t=new Date;t.setHours(23,59,59,999),isNaN(i.getTime())?this.validationErrors.push({field:"data_evento",message:"Formato data non valido"}):i>t&&this.validationErrors.push({field:"data_evento",message:"La data dell'infezione non può essere futura"})}else this.validationErrors.push({field:"data_evento",message:"La data dell'infezione è obbligatoria"});return e.agente_patogeno&&""!==e.agente_patogeno.trim()?e.agente_patogeno.trim().length<2?this.validationErrors.push({field:"agente_patogeno",message:"L'agente patogeno deve contenere almeno 2 caratteri"}):e.agente_patogeno.length>100&&this.validationErrors.push({field:"agente_patogeno",message:"L'agente patogeno non può superare i 100 caratteri"}):this.validationErrors.push({field:"agente_patogeno",message:"L'agente patogeno è obbligatorio"}),e.descrizione&&e.descrizione.length>500&&this.validationErrors.push({field:"descrizione",message:"La descrizione non può superare i 500 caratteri"}),this.isValid=0===this.validationErrors.length,this.isValid}getValidationErrors(){return[...this.validationErrors]}getFieldErrors(e){return this.validationErrors.filter(i=>i.field===e)}hasFieldError(e){return this.validationErrors.some(i=>i.field===e)}getStatus(){return{hasData:this.hasInfectionData(),isValid:this.isValid,errorCount:this.validationErrors.length,timestamp:this.infectionData?.timestamp||null}}cleanupExpiredData(){if(this.infectionData&&this.infectionData.timestamp){const e=Date.now()-36e5;if(this.infectionData.timestamp<e)return this.clearInfectionData(),!0}return!1}}const l=new d,p=Object.freeze(Object.defineProperty({__proto__:null,InfectionDataManager:d,default:l},Symbol.toStringTag,{value:"Module"}));export{r as a,p as b,c as e,n as f,l as i,s as m,a as v};
